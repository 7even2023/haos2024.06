substitutions:
  devicename: az32e09
  friendly_name: e09
  # ------------------
  #   Pin-Belegung / Switch     # GND über 19   kabel schwarz/black
  # ------------------
 # statusled_01red_pin: GPIO26   # a01 26Relais1 kabel lila/purple
 # statusled_02green_pin: GPIO19 # a01 19Relais2 kabel grau/grey
 #  statusled_03blue_pin: GPIO18  # a01 18Relais3 kabel weiss/white
  
 # statusled_04red_pin: GPIO4    # a01 04Relais4 kabel blau/blue
 # statusled_05green_pin: GPIO2  # a01 02Relais5 Kabel grün/green

#  pir_pin: GPIO25               # a01 Bewegung
#  dht_pin: GPIO23               # a06 has bme and dht11 after b07 b08 is dht11 only pin 25 normal motion ^^ pin 23
#  led_pin: GPIO23               # a01 27Relais0 led_id mytime2
#  rgb_pin: GPIO14               # a01_light 8x WS2812B

esphome:
  name: $devicename
  friendly_name: $friendly_name
  comment: 192.168.1.113, Wohnzimmer, dht11, LCD5110 2lines
  #on_boot:
  #  - binary_sensor.template.publish:
  #      id: timer_sensor
  #      state: False
  #  - binary_sensor.template.publish:
  #      id: script_running_sensor
  #      state: False
  #  - sensor.template.publish:
  #      id: countdown_count
  #      state: 10
#    then:
      # Systemzeit mit RTC syncen
#      ds1302.read_time:

esp32:
  board: esp32dev
  framework:
    type: arduino

# Example configuration entry with additional service , ping port
mdns:
  disabled: false #default

# Enable logging
logger:
# level: none # default
# level: error
# level: warn
# level: info
#  level: debug
# level: verbose
# level: very_verbose

debug:
#   update_interval: 5s

# Enable Home Assistant API
api:
  encryption:
    key: "Wp3hg79SodlojKQH7j3+ExMH9jKwZ0f3Y/B3Vupzz+o="

ota:
  password: "b23d6ba7f586b662382cc42578256198"

wifi:
  fast_connect: true
  ssid: 6wlan # !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Az32E08 Fallback Hotspot"
    password: "Ank01AtoBnD8"

captive_portal: # fallback webseite netzwerkauswahl
#####################################################################################
web_server:
  port: 80
  version: 2
  local: true
  auth:
    username: e09
    password: control

#i2c: #(0x27,16,2) lcd1602 PCF8574T, 1=GND, 2=+5V, 3=SDA(orange)auf PIN13, 4=SCL(gelb)auf PIN14  (!PIN12 strapping pin not used)
#######################################################################

# Ich hatte auch Probleme das Display anzuschließen. Hier war definitiv der Aufdruck falsch! Pin1 war mit RST (Reset) gekennzeichnet, Pin 6 mit Vcc.
#Richtig war hier

#Pin1: Vcc (rechteckiger Lötpunkt) 3,3V
#Pin2: CE
#Pin3: DC
#Pin4: DIN
#Pin5: CLK
#Pin6: RST
#Pin7: Light (gegen Masse!) = Ground (Gnd) = Connects to the ground of the circuit.
#Pin8: GND

#####################################################################################
time:
#parallel dauerhaft versuchen über wifi die Zeit zu syncen
  - platform: homeassistant
    id: my_time
    #on_time_sync:
    #  then:
        #- logger.log: "Synchronized system clock"
        #update der RTC
        #ds1302.write_time:
         #id: ds1302_time

  - platform: homeassistant
    id: my_time2
    on_time:
      - seconds: /10
        then:
        - switch.toggle: led_id
#####################################################################################
# Binary Sensor definition
# Präsenzsensor
binary_sensor:
  - platform: template
    name: "${friendly_name} speedtestdl 01"
    device_class: CONNECTIVITY
    lambda: |-
      if (id(speedtestdownload).state > 1) {
        // car is in the garage
        return true;
      } else {
        // no car
        return false;
      } 

  - platform: template
    name: "${friendly_name} speedtestup 02"
    device_class: CONNECTIVITY
    lambda: |-
      if (id(speedtestupload).state > 1) {
        // car is in the garage
        return true;
      } else {
        // no car
        return false;
      } 
#####################################################################################
sensor:
  - platform: homeassistant
    id: speedtestdownload
    entity_id: sensor.speedtest_download
    internal: true

  - platform: copy # Reports the WiFi signal strength in %
    source_id: speedtestdownload
    name: "${friendly_name} speedtestdl"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"  

  - platform: homeassistant
    id: speedtestupload
    entity_id: sensor.speedtest_upload
    internal: true
    filters: 
      - round: 1 # will round to 1 decimal place

  - platform: copy # Reports the WiFi signal strength in %
    source_id: speedtestupload
    name: "${friendly_name} speedtestup"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"  

#####################################################################################
#  - platform: template
#    name: "speedtestup 03" 
#    unit_of_measurement: "kB/s"
#    filters:
#      - lambda: return id(speedtestupload).state; 

  - platform: template
    id: time_second
    name: Time second   
    # Seconds after the minute [0-60] (generally [0-59], extra range is to accommodate leap seconds.)
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.second;

  - platform: template
    id: time_minutes
    name: Time minute   
    # Minutes after the hour [0-59]
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.minute; 

  - platform: template
    id: time_hour
    name: Time hour   
    # Hours since midnight [0-23]
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.hour; 

  - platform: template
    id: time_year
    name: Time year   
    # Year since 0 A.C. [1970-∞[2018
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.year; 

  - platform: template
    id: time_month
    name: Time month   
    # Month, january=1 	[1-12]	
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.month; 

  - platform: template
    id: time_dayofweek
    name: Time dayofweek  
    # Day of the week, sunday=1 [1-7] 7 (saturday)
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.day_of_week; 

  - platform: template
    id: time_dayofmonth
    name: Time dayofmonth  
     # Day of the month [1-31]
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.day_of_month; 

  - platform: template
    id: time_dayofyear
    name: Time dayofyear
     # Day of the year [1-365]
    lambda: |- 
      char str[30];
      auto time = id(my_time).now();   
      return time.day_of_year; 

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${friendly_name} WiFi Signal"
    id: wifi_signal_db
    update_interval: 4s     #60s 120s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 1
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendly_name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"  #Signal %
    entity_category: "diagnostic"

  - platform: uptime
    name: "${friendly_name} Uptime Sensor" 
    id: ${friendly_name}_uptimesensor

#####################################################################################
  - platform: dht
    pin: GPIO25  # D2
    model: DHT11
    temperature:
      id: my_temp
      name: "Temperature Sensor"
    humidity:
      id: my_humi
      name: "Humidity Sensor"
    update_interval: 60s

# Example configuration entry
spi:
  clk_pin: GPIO18 # Clock (CLK) = All SPI modules require a common clock, this clock source is supplied to this pin --- SCK=GPIO18=D5
  mosi_pin: GPIO23 # Serial Input (DIN) = This is the input pin (MOSI) through which serial instructions are sent --- MOSI=GPIO23=D7

font:
  - file: _fonts/ComicSansMS3.ttf  # https://www.wfonts.com/font/comic-sans-ms
    id: my_font
    size: 20

display:
  - platform: pcd8544 # Nokia5110 LCD it.print(0, 0, id(my_font), "Hello World!"); it.printf(1, 8, id(my_font), "T: %.1f°C", id(my_temp).state); it.printf(1, 30, id(my_font), "H: %.1f%%", id(my_humi).state);
    reset_pin: GPIO26 # =D0 --- RST / Reset = This pin resets the module. It an active low pin (resets when 0V is provided)
    cs_pin: GPIO5 # =D8  CS0 --- Chip Enable (CE) = This pin is made low (0V) to select this particular display when more than one SPI peripherals are used.
    dc_pin: GPIO22 # =D1  Data/Command (DC) = This pin is used to switch between Data mode (high) and Command mode (low)
    contrast: 0x7f
    lambda: |-
      it.printf(1, 0, id(my_font), "T: %.1f°C", id(my_temp).state);
      it.printf(1, 22, id(my_font), "H: %.1f%%", id(my_humi).state);

#####################################################################################
# Button definition Richtige buttons visit web oberfläche "drücken" = button ,  slider=switch
switch:
  - platform: restart
    name: "${friendly_name} Restart"
    id: ${friendly_name}_restart   

  - platform: gpio
    pin: GPIO4
    id: led_id
    name: "${friendly_name} 10s Relais"

button:
# Neustart ESP
#  - platform: restart
#    name: "Restart"
# Herunterfahren ESP
#  - platform: shutdown
#    name: "Shutdown"

#####################################################################################
# Text Sensor definition
# WIFI Info Bereich
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} Connected SSID"
    bssid:
      name: "${friendly_name} Connected BSSID"
    mac_address:
      name: "${friendly_name} Mac Wifi Address"

  - platform: template
    id: time_utctime
    name: Time utctime 
    # Alternatively, you can use .utcnow() to get the current UTC time.
    lambda: | 
      auto time_text = id(my_time).now().strftime("%Y-%m-%d %H:%M");
      return {time_text};
    update_interval: 60s

  - platform: template
    id: time_mytime1
    name: Time mytime1
    # Alternatively, you can use .utcnow() to get the current UTC time. %Y-%m-%d %H:%M:%S
    lambda: | 
      auto time_text = id(my_time).now().strftime("%d.%m.%Y %H:%M:%S");
      return {time_text};
    update_interval: 60s

  - platform: template
    id: time_mytime2
    name: Time mytime2
    # Alternatively, you can use .utcnow() to get the current UTC time. %Y-%m-%d %H:%M:%S
    lambda: | 
      auto time_text = id(my_time).now().strftime("%H:%M:%S %d.%m.%Y");
      return {time_text};
    update_interval: 1s


    