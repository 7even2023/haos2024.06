substitutions:
  devicename: az32d06
  friendly_name: d06

esphome:
  name: $devicename
  friendly_name: $friendly_name
  comment: 192.168.1.130, GartenRainSoil, 8x1 RGBled, 2xfoto

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "+GX5tPJg5lFt++i0KKqkLCBaTOMLIle5B5T27sUeKvs="

ota:
  password: "52a297025aab67452d863e4e7bd0df24"

wifi:
  ssid: 6wlan # !secret wifi_ssid
  password: !secret wifi_password
#  power_save_mode: none
#  reboot_timeout: 0s
#  domain: ".local"       #  domain  .fritz.box 
#  output_power: 20dB
#  fast_connect: true

#  manual_ip:
#    static_ip: 192.168.1.171 # 3EG5-Garten (A) = Bereich ,  d6 moise+rain+dht11
#    gateway: 192.168.1.1
#    subnet: 255.255.255.0 # subnet2 test 255.255.0.0
#    dns1: 192.168.1.1
#    dns2: 8.8.8.8

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Az32D06 Fallback Hotspot"
    password: "6F80m2x4ayLt"

captive_portal:

web_server:
  port: 80
  version: 2
  local: true
  auth:
    username: d06
    password: control

sensor:
  - platform: dht
    pin: GPIO25
    temperature:
      id: temp
      name: "Temperature Sensor Room "
    humidity:
      id: humi
      name: "Humidity Sensor Room "
    update_interval: 120s # 60s

  # Fotowiderstand (siehe Schaltplan links NICHT bestÃ¼ckt immer 0% ):
  - platform: adc
    pin: GPIO32
    name: "Soil Moisture"
    update_interval: 120s # 600s
    unit_of_measurement: "%"
    filters:
    - median:
        window_size: 7
        send_every: 4
        send_first_at: 1
    - calibrate_linear:
        - 0.85 -> 0.00
        - 0.44 -> 100.00
    - lambda: |
        if (x < 0) return 0; 
        else if (x > 100) return 100;
        else return (x);

  # Fotowiderstand (siehe Schaltplan rechts 2.ac am relais):

  - platform: adc
    pin: GPIO33
    name: "Regen Wert"
    id: RegenWert
    internal: true
    update_interval: 120s # 10s
    accuracy_decimals: 1    
    unit_of_measurement: 'V'
    
  - platform: template
    name: "Regen Sensor Volt"
    unit_of_measurement: "V"
    lambda: return id(RegenWert).state;
    update_interval: 120s # 10s

#binary_sensor:
#  - platform: gpio
#    pin:
#      number: D1
#      inverted: true
#    name: "Regensensor"


    