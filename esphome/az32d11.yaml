substitutions:
  devicename: az32d11
  friendly_name: d11
  # ------------------
  #   Pin-Belegung / Switch     # GND über 19   kabel schwarz/black
  # ------------------
 # statusled_01red_pin: GPIO26   # a01 26Relais1 kabel lila/purple
 # statusled_02green_pin: GPIO19 # a01 19Relais2 kabel grau/grey
 #  statusled_03blue_pin: GPIO18  # a01 18Relais3 kabel weiss/white
  
 # statusled_04red_pin: GPIO4    # a01 04Relais4 kabel blau/blue
 # statusled_05green_pin: GPIO2  # a01 02Relais5 Kabel grün/green

#  pir_pin: GPIO25               # a01 Bewegung
#  dht_pin: GPIO23               # a06 has bme and dht11 after b07 b08 is dht11 only pin 25 normal motion ^^ pin 23
#  led_pin: GPIO23               # a01 27Relais0 led_id mytime2
#  rgb_pin: GPIO14               # a01_light 8x WS2812B

esphome:
  name: $devicename
  friendly_name: $friendly_name
  comment: 192.168.1.139, MatrixUhr2, Display-4x(8x8)max7219digit, dht11 

esp32:
  board: esp32dev
  framework:
    type: arduino

# Example configuration entry with additional service , ping port
mdns:
  disabled: false #default

# Enable logging
logger:
# level: $loglevel
# level: none # default
# level: error
# level: warn
# level: info
#  level: debug
# level: verbose
# level: very_verbose

debug:
#   update_interval: 5s

# Enable Home Assistant API
api:
  encryption:
    key: "ItbIWzcS56YSbi3bzNAcXSTtFpRDeLxjgRD4we1jHrg="
  reboot_timeout: 0s
  services:
    - service: write_text
      variables:
        message: string
      then:
        - globals.set:
            id: matrix_text
            value: !lambda 'return message;'

        - delay: 20s
        - globals.set:
            id: matrix_text
            value: !lambda 'return "";'

ota:
  password: "235a7a83f30c47e4663bdb685bbe055c"

wifi:
  fast_connect: true
  ssid: 6wlan # !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Az32D11 Fallback Hotspot"
    password: "Ank01AtoBnD11"

captive_portal: # fallback webseite netzwerkauswahl
#####################################################################################
web_server:
  port: 80
  version: 2
  local: true
  auth:
    username: d11
    password: control
#####################################################################################
time:
  - platform: sntp
    id: esphome_time
    servers:
      - 0.pool.ntp.org
#parallel dauerhaft versuchen über wifi die Zeit zu syncen
  - platform: homeassistant
    id: my_time
    #on_time_sync:
    #  then:
        #- logger.log: "Synchronized system clock"
        #update der RTC
        #ds1302.write_time:
         #id: ds1302_time

  - platform: homeassistant
    id: my_time2
    on_time:
      - seconds: /10
        then:
        - switch.toggle: led_id
#####################################################################################
# Binary Sensor definition
# Präsenzsensor
binary_sensor:
  - platform: template
    name: "${friendly_name} speedtestdl 01"
    device_class: CONNECTIVITY
    lambda: |-
      if (id(speedtestdownload).state > 1) {
        // car is in the garage
        return true;
      } else {
        // no car
        return false;
      } 

  - platform: template
    name: "${friendly_name} speedtestup 02"
    device_class: CONNECTIVITY
    lambda: |-
      if (id(speedtestupload).state > 1) {
        // car is in the garage
        return true;
      } else {
        // no car
        return false;
      } 

  - platform: status
    name: ${friendly_name} Status  # "D11 Status"
#####################################################################################
sensor:
  - platform: homeassistant
    id: speedtestdownload
    entity_id: sensor.speedtest_download
    internal: true

  - platform: copy # Reports the WiFi signal strength in %
    source_id: speedtestdownload
    name: "${friendly_name} speedtestdl"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"  

  - platform: homeassistant
    id: speedtestupload
    entity_id: sensor.speedtest_upload
    internal: true
    filters: 
      - round: 1 # will round to 1 decimal place

  - platform: copy # Reports the WiFi signal strength in %
    source_id: speedtestupload
    name: "${friendly_name} speedtestup"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"  

  - platform: dht
    pin: GPIO25
    model: DHT11
    temperature:
      id: temp1
      name: ${friendly_name} Temperature Sensor25 # "D11 Temperature Sensor25 innen"
    humidity:
      id: humi1
      name: ${friendly_name} Humidity Sensor25 # "D11 Humidity Sensor25 innen"
    update_interval: 60s #30s     60s eco

#####################################################################################
# Text Sensor definition
# WIFI Info Bereich
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} Connected SSID"
    bssid:
      name: "${friendly_name} Connected BSSID"
    mac_address:
      name: "${friendly_name} Mac Wifi Address"

  - platform: template
    id: time_utctime
    name: Time utctime 
    # Alternatively, you can use .utcnow() to get the current UTC time.
    lambda: | 
      auto time_text = id(my_time).now().strftime("%Y-%m-%d %H:%M");
      return {time_text};
    update_interval: 60s

  - platform: template
    id: time_mytime1
    name: Time mytime1
    # Alternatively, you can use .utcnow() to get the current UTC time. %Y-%m-%d %H:%M:%S
    lambda: | 
      auto time_text = id(my_time).now().strftime("%d.%m.%Y %H:%M:%S");
      return {time_text};
    update_interval: 60s

  - platform: template
    id: time_mytime2
    name: Time mytime2
    # Alternatively, you can use .utcnow() to get the current UTC time. %Y-%m-%d %H:%M:%S
    lambda: | 
      auto time_text = id(my_time).now().strftime("%H:%M:%S %d.%m.%Y");
      return {time_text};
    update_interval: 1s

  - platform: homeassistant
    name: "Matrix Text"
    id: matrix_text1
    entity_id: input_text.matrix_text  # !!!helper2
    
  - platform: homeassistant
    name: "Brightness 7219"
    id: matrixbri
    entity_id: input_number.matrixbri   # !!!helper1

switch:
  - platform: restart
    name: ${friendly_name} Restart # "D11 Restart"

  - platform: gpio
    pin: GPIO4
    id: led_id
    name: "${friendly_name} 10s Relais"

#  - platform: shutdown
#    name: ${friendly_name} Shutdown  # "D11 Shutdown"

#----------------------------
#   Globale Variablen
#----------------------------
globals:
  - id: matrix_text
    type: std::string
    restore_value: no
    initial_value: ''
  - id: anim_pos
    type: int
    restore_value: no
    initial_value: '0'

  - id: display_page   ##Test2
    type: int
    restore_value: no
    initial_value: '1'

#----------------------------
#   LED Matrix (MAX7219)
#----------------------------
font:
  - file: "_fonts/pixelmix.ttf"
    id: digit_font
    size: 8

spi:
  clk_pin: GPIO18 #D5 SCK
  mosi_pin: GPIO23 #D7 Mosi

display:
  - platform: max7219digit
    rotate_chip: 0 # 180 #dirty fix from esphome 2.2
    reverse_enable: false
    flip_x: false #dirty fix end 
    id: matrix_display  # max7219d
    cs_pin: GPIO19 #D6 Miso
    num_chips: 4
    intensity: 10   #start Brightness 7219 vorher 10   0-15  !!!helper1
    scroll_enable: true
    scroll_mode: CONTINUOUS
    scroll_speed: 120ms # 200ms
    scroll_delay: 3s
    scroll_dwell: 22s
    update_interval: 10s  #5s
    # lambda orginal "%d.%m"  to %H:%M   int atoi (const char * str);  = Convert string to integer
    lambda: |-
     if(strlen(id(matrix_text).c_str()) > 0){
        it.printf(0, 0, id(digit_font), "%s - - - ", id(matrix_text).c_str());
      } else {
          it.intensity(atoi(id(matrixbri).state.c_str()));
          if (id(display_page) == 1) {
            it.strftime(0, 0, id(digit_font), "%d.%m", id(esphome_time).now()); 
            }  else {
              if (id(display_page) == 2) {
              it.strftime(0, 0, id(digit_font), "%H:%M", id(esphome_time).now()); 
              } else {
                if (id(display_page) == 3) {
                it.printf(0, 0, id(digit_font), "%.1f°C", id(temp1).state); 
                } else {
                   if (id(display_page) == 4) {
                   it.printf(0, 0, id(digit_font), "%.1f%%", id(humi1).state);
                   } else {
                   if (id(display_page) == 5) { 
                     it.printf(0, 0, id(digit_font), "%s + + + ", id(matrix_text1).state.c_str()); 
                     id(display_page) = 0;
                     }
                   
                   } } } };}
          id(display_page) ++;


    
